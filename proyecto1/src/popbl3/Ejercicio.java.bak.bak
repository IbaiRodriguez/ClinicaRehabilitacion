package popbl3;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Calendar;
import java.util.GregorianCalendar;

import popbl3.GestorMano.RESULTADO;

public class Ejercicio {
	
	final String SEPARADOR = "$";
	final int BIEN = 0;
	final int CASI = 1;
	final int MAL = 2;
	final int DIRECTORIO_GIF = 3;
	
	String id;
	String nombre;
	String descripcion;
	String directorioGIF;
	String resultado;
	String fecha;
	int repeticiones;
	int repeticionesRealizadas;
	
	boolean seleccionado;
	
	
	public Ejercicio(String id, String nombre, String descripcion, String directorioGIF){
		this.id = id;
		this.nombre = nombre;
		this.descripcion = descripcion;
		this.directorioGIF = directorioGIF;
		this.resultado = "";
		this.fecha = fechaDelSistema();
		this.repeticiones = 5; 
		this.seleccionado = false;
	}
	
	public Ejercicio(String id, String resultado, String fecha, int repeticiones, boolean seleccionado){
		this.id = id;
		this.resultado = resultado;
		this.fecha = fecha;
		this.repeticiones = repeticiones; 
		this.seleccionado = seleccionado;
		this.cargarNombreDescripcionYGIF(id);
	}

	private void cargarNombreDescripcionYGIF(String id) {
		BufferedReader in = null;
		
		String nombreFichero = GestorFicheros.NOMBRE_FICH_EJERCICIOS;
		String separador = GestorFicheros.SEPARADOR_DOLAR;
		String lineaLeida;
		String[] valoresEjercicio;
		
		try{
			in = new BufferedReader(new FileReader(nombreFichero));
			
			while((lineaLeida = in.readLine()) != null){
				valoresEjercicio = lineaLeida.split(separador);
				
				if(valoresEjercicio[ID].equals(id)){
					this.nombre = valoresEjercicio[NOMBRE_EJERCICIO];
					this.descripcion = valoresEjercicio[DESCRIPCION];
					this.directorioGIF = valoresEjercicio[DIRECTORIO_GIF];
					break;
				}				
			}
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally{
			if(in != null){
				try {
					in.close();
				} catch (IOException e) {}
			}
		}
				
	}

	private String fechaDelSistema() {
		String fecha;
		Calendar calendario = new GregorianCalendar();
        
        int año = calendario.get(Calendar.YEAR);
        int mes = calendario.get(Calendar.MONTH);
        int dia = calendario.get(Calendar.DAY_OF_MONTH);
       
        fecha = dia+"/"+(mes+1)+"/"+año;
        
		return fecha;
	}

	public String getId() {
		return id;
	}

	public String getNombre() {
		return nombre;
	}

	public String getDescripcion() {
		return descripcion;
	}

	public String getDirectorioGIF() {
		return directorioGIF;
	}
	public void changeSelection() {
		this.seleccionado = !this.seleccionado;
	}
	
	public void setSeleccionado(boolean seleccionado) {
		this.seleccionado = seleccionado;
	}
	
	public boolean isSeleccionado() {
		return seleccionado;
	}
	
	public String getResultado() {
		if (resultado.isEmpty()) {
			resultado = "BIEN=0@CASI=0@MAL=0";
		}
		return resultado;
	}
	public void setResultado(int bien,int casi,int mal){
		resultado = "BIEN=" + bien + "@CASI=" + casi + "@MAL=" + mal;
	}
	
	public Object getFieldAt(int columna) {
		switch (columna){
		case 0: return id;
		case 1: return nombre;
		case 2: return fecha;
		case 3: return new Integer(repeticiones);
		case 4: return resultado;
		default: return null;
		}
	}
	
	public String guardar(){
		String linea;
		
		linea  = id+SEPARADOR+resultado+SEPARADOR+fecha+SEPARADOR+
				 repeticiones+SEPARADOR+seleccionado;
		
		return linea;
	}

	public int getMaxRepeticiones() {		
		return repeticiones;
	}

	public boolean isCompletado(){
		boolean completado = false;
		if(getValorResultado(BIEN)>= getMaxRepeticiones())
			completado = true;
		return completado;
	}
	public int getValorResultado(int calificacion){
		int cantidad = 0;
		String[] splitResult = new String[3];
		String[] splitValor = new String[2];
		splitResult = getResultado().split("[@]");
		splitValor = splitResult[calificacion].split("[=]");
		cantidad = Integer.valueOf(splitValor[1]);
		return cantidad;
	}
	public boolean modificarResultado(RESULTADO resultado) {
		boolean correcto = true;
		int bien;
		int casi;
		int mal;
		try {			
			bien = getValorResultado(BIEN);		
			casi = getValorResultado(CASI);
			mal = getValorResultado(MAL);
			switch (resultado) {
			case BIEN:
				bien++;
				break;
			case CASI:
				casi++;
				break;
			case MAL:
				mal++;
				break;
			default:
				break;
			}			
			this.setResultado(bien,casi,mal);
		} catch (NumberFormatException e) {
			e.printStackTrace();
			correcto = false;
		}
		return correcto;

	}
}
